@attribute [Authorize]
@page "/Group/{GroupId}/instance/{DataTypeId}"
@page "/Group/{GroupId}/instance/{DataTypeId}/{InstanceId}"

@using Microsoft.AspNetCore.Authorization
@using depot.Shared.RequestModels
@using depot.Shared.ResponseModels
@using depot.Shared.Enumerations

@inject NavigationManager _navigationManger
@inject depot.Client.Services.API API
@inject IToastService _toastService
@inject IModalService _modalService

@if (Type != null)
{
    <div class="mb-3">
        <NavLink href="@($"Group/{GroupId}/type/{Type.Id}")">
            &#171; Back to Search
        </NavLink>
    </div>
    <form class="row" @onsubmit="SaveInstance">
        <div class="col-md-9">
            <div class="card">
                <h5 class="card-header text-white bg-dark">@Type.Name</h5>
                <div class="card-body">
                    <div class="card-body">
                        @for (int row = 1; row <= Type.Fields.Select(f => f.Row).Max(); row++)
                        {
                            <div class="row">
                                @for (int col = 1; col <= 12; col++)
                                {
                                    foreach (var field in Type.Fields.Where(f => f.Row == row && f.Column == col))
                                    {
                                        @if (field.Type == FieldType.Text)
                                        {
                                            <div class="form-group col-lg-@(field.Column + (field.ColumnSpan - field.Column))">
                                                <label for="@field.Id">
                                                    @field.Name @if (!field.Optional)
                                                    {<span class="required-astrisk">*</span>}
                                                </label>
                                                <input id="@field.Id" type="text" class="form-control" @bind="InstanceData[field.Id]" />
                                            </div>
                                        }
                                        else if (field.Type == FieldType.TextArea)
                                        {
                                            <div class="form-group col-lg-@(field.Column + (field.ColumnSpan - field.Column))">
                                                <label for="@field.Id">
                                                    @field.Name @if (!field.Optional)
                                                    {<span class="required-astrisk">*</span>}
                                                </label>
                                                <textarea id="@field.Id" class="form-control" @bind="InstanceData[field.Id]"></textarea>
                                            </div>
                                        }
                                        else if (field.Type == FieldType.Number)
                                        {
                                            <div class="form-group col-lg-@(field.Column + (field.ColumnSpan - field.Column))">
                                                <label for="@field.Id">
                                                    @field.Name @if (!field.Optional)
                                                    {<span class="required-astrisk">*</span>}
                                                </label>
                                                <input id="@field.Id" type="number" class="form-control" @bind="InstanceData[field.Id]" />
                                            </div>
                                        }
                                        else if (field.Type == FieldType.Date)
                                        {
                                            <div class="form-group col-lg-@(field.Column + (field.ColumnSpan - field.Column))">
                                                <label for="@field.Id">
                                                    @field.Name @if (!field.Optional)
                                                    {<span class="required-astrisk">*</span>}
                                                </label>
                                                <div id="@field.Id">
                                                    <DateAsString @bind-Value="InstanceData[field.Id]"></DateAsString>
                                                </div>
                                            </div>
                                        }
                                        else if (field.Type == FieldType.Time)
                                        {
                                            <div class="form-group col-lg-@(field.Column + (field.ColumnSpan - field.Column))">
                                                <label for="@field.Id">
                                                    @field.Name @if (!field.Optional)
                                                    {<span class="required-astrisk">*</span>}
                                                </label>
                                                <div id="@field.Id">
                                                    <TimeAsString Id="@field.Id" @bind-Value="InstanceData[field.Id]"></TimeAsString>
                                                </div>
                                            </div>
                                        }
                                        else if (field.Type == FieldType.Enum)
                                        {
                                            <div class="form-group col-lg-@(field.Column + (field.ColumnSpan - field.Column))">
                                                <label for="@field.Id">
                                                    @field.Name @if (!field.Optional)
                                                    {<span class="required-astrisk">*</span>}
                                                </label>
                                                <select class="form-control" @bind="InstanceData[field.Id]">
                                                    <option value=""></option>
                                                    @foreach (var option in field.Options.Split(','))
                                                    {
                                                        <option value="@option">@option</option>
                                                    }
                                                </select>
                                            </div>
                                        }

                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="row">
                <div class="col-md-12 btn-group-vertical">
                    <button class="btn btn-info w-100" type="submit"><i class="fas fa-check mr-2"></i>Save @Type.Name</button>
                    @if (InstanceId != null)
                    {
                        <div class="btn btn-danger w-100" @onclick="DeleteInstance"><i class="fas fa-trash-alt mr-2"></i>Delete</div>
                    }
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-md-12">
                    <strong>Update On: </strong>@InstanceData.GetValueOrDefault("UpdatedOn")
                </div>
            </div>
            <div class="row mt-1">
                <div class="col-md-12">
                    <strong>Update By: </strong>@InstanceData.GetValueOrDefault("UpdatedBy")
                </div>
            </div>
            <div class="row mt-3">
                <div class="col-md-12">
                    <strong>Created On: </strong>@InstanceData.GetValueOrDefault("CreatedOn")
                </div>
            </div>
            <div class="row mt-1">
                <div class="col-md-12">
                    <strong>Created By: </strong>@InstanceData.GetValueOrDefault("CreatedBy")
                </div>
            </div>
        </div>
    </form>
}

@code {
    [Parameter]
    public string GroupId { get; set; }

    [Parameter]
    public string DataTypeId { get; set; }

    [Parameter]
    public string InstanceId { get; set; }



    //Loaded from API
    public ResponseGroup Group { get; set; } = new ResponseGroup();
    public ResponseInstanceType Type { get; set; }
    public List<ResponseInstanceType> Types { get; set; } = new List<ResponseInstanceType>();
    public Dictionary<string, string> InstanceData { get; set; } = new Dictionary<string, string>();

    async protected override Task OnParametersSetAsync()
    {

        await GetGroup();
        await GetDataTypes();
        await GetSelectedInstance();
    }

    async private Task GetGroup()
    {
        Group = await API.GroupGetById(GroupId);
    }

    async private Task GetDataTypes()
    {
        Types = await API.GetGroupTypeAsList(GroupId);
        Type = await API.GetGroupTypeById(GroupId, DataTypeId);

        foreach (var t in Type.Fields)
        {
            InstanceData.Add(t.Id, string.Empty);
        }
    }

    async private Task GetSelectedInstance()
    {
        if (InstanceId != null)
        {
            var result = await API.GetGroupInstance(GroupId, DataTypeId, InstanceId);
            InstanceData = result.InstanceData;
        }
    }

    async private Task SaveInstance()
    {
        bool error = false;
        foreach (var field in Type.Fields)
        {
            if (!field.Optional)
            {
                string fieldValue = InstanceData[field.Id];
                if (string.IsNullOrEmpty(fieldValue))
                {
                    _toastService.ShowError($"{field.Name} is required");
                    error = true;
                }
            }
        }

        if (error)
            return;

        if (InstanceId == null)
        {
            var response = await API.CreateGroupInstance(GroupId, DataTypeId, InstanceData);
            InstanceId = response.Id;
            await GetSelectedInstance();
            _navigationManger.NavigateTo($"/Group/{GroupId}/instance/{DataTypeId}/{InstanceId}");
        }
        else if (InstanceId != null)
        {
            await API.UpdateGroupInstance(GroupId, DataTypeId, InstanceId, InstanceData);
            await GetSelectedInstance();
        }

        _toastService.ShowSuccess("Saved");

    }

    async private Task DeleteInstance()
    {
        var modal = _modalService.Show<ConfirmDialog>("Are you sure you want to delete this?");
        var modalResult = await modal.Result;

        if (modalResult.Cancelled) { }
        else
        {
            await API.DeleteGroupInstance(GroupId, DataTypeId, InstanceId);
            _navigationManger.NavigateTo($"Group/{GroupId}/type/{DataTypeId}");
        }
    }
}
