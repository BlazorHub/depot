@using depot.Shared.RequestModels
@using depot.Shared.ResponseModels
@using depot.Shared.Enumerations

@inject NavigationManager _navigationManger
@inject depot.Client.Services.API API

<strong>Link To:</strong>
<div class="row mt-2">
    <select class="form-control" @bind="LinkingType">
        <option value="0">---Select Type---</option>
        @foreach (var type in Types)
        {
            <option value="@type.Id">@type.Name</option>
        }
    </select>
</div>
<div class="row mt-1">
    <div class="input-group w-100">
        <input type="text" class="form-control" @bind="LinkingSearchFilter" placeholder="Search Items" aria-label="Search Items" aria-describedby="button-addon2">
        <div class="input-group-append">
            <button class="btn btn-outline-secondary" type="button" id="button-addon2" @onclick="(() => LinkingSearch(0))">Search</button>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="btn btn-link btn-sm float-right pointer">Reset</div>
    </div>
</div>
@if (LinkingSearchInstances.Count > 0)
{
    <div class="row">
        <div class="col-md-12">
            <table class="table table-hover table-sm">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th width="100px">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var i in LinkingSearchInstances)
                    {
                        <tr>
                            <td>
                                <span class="ml-1">@i.Where(a => a.Key != "InstanceId").FirstOrDefault().Value</span>
                            </td>
                            <td>
                                <input type="button" class="btn btn-primary btn-sm" value="Link" @onclick="(() => LinkingSelectedResult(i.Where(a => a.Key == InstanceIdKey).FirstOrDefault().Value))" />
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}
<div class="row mt-1">
    <nav aria-label="page navigation">
        <ul class="pagination">
            <li class="page-item">
                <div class="page-link" @onclick="(() => LinkingSearch(LinkingPage - 1))" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">Previous</span>
                </div>
            </li>
            <li class="page-item">
                <div class="page-link" @onclick="(() => LinkingSearch(LinkingPage + 1))" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Next</span>
                </div>
            </li>
        </ul>
    </nav>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter]
    public string GroupId { get; set; }

    [Parameter]
    public string InstanceTypeId { get; set; }

    [Parameter]
    public string InstanceId { get; set; }

    //Loaded from API
    public List<ResponseInstanceType> Types { get; set; } = new List<ResponseInstanceType>();

    async protected override Task OnInitializedAsync()
    {
        await GetDataTypes();
    }

    async private Task GetDataTypes()
    {
        Types = await API.GetGroupTypeAsList(GroupId);
    }


    public string LinkingType { get; set; }
    public string LinkingSearchFilter { get; set; }
    List<Dictionary<string, string>> LinkingSearchInstances = new List<Dictionary<string, string>>();
    int? LinkingTotalFound { get; set; }
    int LinkingPage { get; set; } = 0;
    string InstanceIdKey = "InstanceId";

    public void Confirm()
    {
        BlazoredModal.Close(ModalResult.Ok(string.Empty));
    }

    public void Cancel()
    {
        BlazoredModal.Cancel();
    }


    async private Task LinkingSearch(int page)
    {
        LinkingPage = page >= 0 ? page : 0;

        Search search = new Search()
        {
            FilterText = LinkingSearchFilter,
            Page = page,
            PageSize = 5,
            SortDirection = 1,
            SortBy = "InstanceId",
            OnlyPrimary = true
        };

        var response = await API.SearchGroupInstance(GroupId, LinkingType, search);
        LinkingSearchInstances = response.Data;
        LinkingTotalFound = response.Total;
    }

    async private Task LinkingSelectedResult(string selectedInstanceId)
    {
        await API.LinkInstanceByInstanceIds(GroupId, InstanceTypeId, InstanceId, selectedInstanceId);

        BlazoredModal.Close(ModalResult.Ok(string.Empty));
    }
}
